from glob import glob
from io import StringIO
from os.path import basename
from os.path import join as p_join

import numpy as np
import pandas as pd

from openqdc.datasets.base import BaseDataset
from openqdc.utils.molecule import atom_table


def read_xyz_and_get_content(fname):
    with open(fname, "r") as f:
        content = f.read()
    s = StringIO(content)
    d = np.loadtxt(s, skiprows=2, dtype="str")
    z, positions = d[:, 0], d[:, 1:].astype(np.float32)
    z = np.array([atom_table.GetAtomicNumber(s) for s in z])
    xs = np.stack((z, np.zeros_like(z)), axis=-1)
    conf = dict(
        atomic_inputs=np.concatenate((xs, positions), axis=-1, dtype=np.float32),
        name=np.array([basename(fname)]),
        n_atoms=np.array([positions.shape[0]], dtype=np.int32),
        subset=np.array(["multixcqm9"]),
    )
    return conf


def read_xyz_files(folder_path):
    xyz_list = []
    for file in sorted(glob(folder_path + "/xyzfiles/*.xyz")):
        xyz_list.append(read_xyz_and_get_content(file))
    return xyz_list


class MultixcQM9(BaseDataset):
    __name__ = "multixcqm9"

    __energy_methods__ = [
        "kcis-modified/dzp",
        "kcis-original/dzp",
        "pkzb/dzp",
        "vs98/dzp",
        "lda(vwn)/dzp",
        "pw91/dzp",
        "blyp/dzp",
        "bp/dzp",
        "pbe/dzp",
        "rpbe/dzp",
        "revpbe/dzp",
        "olyp/dzp",
        "ft97/dzp",
        "blap3/dzp",
        "hcth/93/dzp",
        "hcth/120/dzp",
        "hcth/147/dzp",
        "hcth/407/dzp",
        "bmtau1/dzp",
        "bop/dzp",
        "pkzbx-kciscor/dzp",
        "vs98-x(xc)/dzp",
        "vs98-x-only/dzp",
        "becke00/dzp",
        "becke00x(xc)/dzp",
        "becke00-x-only/dzp",
        "becke88x+br89c/dzp",
        "olap3/dzp",
        "tpss/dzp",
        "mpbe/dzp",
        "opbe/dzp",
        "operdew/dzp",
        "mpbekcis/dzp",
        "mpw/dzp",
        "tau-hcth/dzp",
        "xlyp/dzp",
        "kt1/dzp",
        "kt2/dzp",
        "m06-l/dzp",
        "blyp-d/dzp",
        "bp86-d/dzp",
        "pbe-d/dzp",
        "tpss-d/dzp",
        "b97-d/dzp",
        "revtpss/dzp",
        "pbesol/dzp",
        "rge2/dzp",
        "ssb-d/dzp",
        "mvs/dzp",
        "mvsx/dzp",
        "t-mgga/dzp",
        "tpssh/dzp",
        "b3lyp(vwn5)/dzp",
        "o3lyp(vwn5)/dzp",
        "kmlyp(vwn5)/dzp",
        "pbe0/dzp",
        "b3lyp*(vwn5)/dzp",
        "bhandh/dzp",
        "bhandhlyp/dzp",
        "b97/dzp",
        "b97-1/dzp",
        "b97-2/dzp",
        "mpbe0kcis/dzp",
        "mpbe1kcis/dzp",
        "b1lyp(vwn5)/dzp",
        "b1pw91(vwn5)/dzp",
        "mpw1pw/dzp",
        "mpw1k/dzp",
        "tau-hcth-hybrid/dzp",
        "x3lyp(vwn5)/dzp",
        "opbe0/dzp",
        "m05/dzp",
        "m05-2x/dzp",
        "m06/dzp",
        "m06-2x/dzp",
        "b3lyp-d/dzp",
        "kcis-modified/tzp",
        "kcis-original/tzp",
        "pkzb/tzp",
        "vs98/tzp",
        "lda(vwn)/tzp",
        "pw91/tzp",
        "blyp/tzp",
        "bp/tzp",
        "pbe/tzp",
        "rpbe/tzp",
        "revpbe/tzp",
        "olyp/tzp",
        "ft97/tzp",
        "blap3/tzp",
        "hcth/93/tzp",
        "hcth/120/tzp",
        "hcth/147/tzp",
        "hcth/407/tzp",
        "bmtau1/tzp",
        "bop/tzp",
        "pkzbx-kciscor/tzp",
        "vs98-x(xc)/tzp",
        "vs98-x-only/tzp",
        "becke00/tzp",
        "becke00x(xc)/tzp",
        "becke00-x-only/tzp",
        "becke88x+br89c/tzp",
        "olap3/tzp",
        "tpss/tzp",
        "mpbe/tzp",
        "opbe/tzp",
        "operdew/tzp",
        "mpbekcis/tzp",
        "mpw/tzp",
        "tau-hcth/tzp",
        "xlyp/tzp",
        "kt1/tzp",
        "kt2/tzp",
        "m06-l/tzp",
        "blyp-d/tzp",
        "bp86-d/tzp",
        "pbe-d/tzp",
        "tpss-d/tzp",
        "b97-d/tzp",
        "revtpss/tzp",
        "pbesol/tzp",
        "rge2/tzp",
        "ssb-d/tzp",
        "mvs/tzp",
        "mvsx/tzp",
        "t-mgga/tzp",
        "tpssh/tzp",
        "b3lyp(vwn5)/tzp",
        "o3lyp(vwn5)/tzp",
        "kmlyp(vwn5)/tzp",
        "pbe0/tzp",
        "b3lyp*(vwn5)/tzp",
        "bhandh/tzp",
        "bhandhlyp/tzp",
        "b97/tzp",
        "b97-1/tzp",
        "b97-2/tzp",
        "mpbe0kcis/tzp",
        "mpbe1kcis/tzp",
        "b1lyp(vwn5)/tzp",
        "b1pw91(vwn5)/tzp",
        "mpw1pw/tzp",
        "mpw1k/tzp",
        "tau-hcth-hybrid/tzp",
        "x3lyp(vwn5)/tzp",
        "opbe0/tzp",
        "m05/tzp",
        "m05-2x/tzp",
        "m06/tzp",
        "m06-2x/tzp",
        "b3lyp-d/tzp",
        "kcis-modified/sz",
        "kcis-original/sz",
        "pkzb/sz",
        "vs98/sz",
        "lda(vwn)/sz",
        "pw91/sz",
        "blyp/sz",
        "bp/sz",
        "pbe/sz",
        "rpbe/sz",
        "revpbe/sz",
        "olyp/sz",
        "ft97/sz",
        "blap3/sz",
        "hcth/93/sz",
        "hcth/120/sz",
        "hcth/147/sz",
        "hcth/407/sz",
        "bmtau1/sz",
        "bop/sz",
        "pkzbx-kciscor/sz",
        "vs98-x(xc)/sz",
        "vs98-x-only/sz",
        "becke00/sz",
        "becke00x(xc)/sz",
        "becke00-x-only/sz",
        "becke88x+br89c/sz",
        "olap3/sz",
        "tpss/sz",
        "mpbe/sz",
        "opbe/sz",
        "operdew/sz",
        "mpbekcis/sz",
        "mpw/sz",
        "tau-hcth/sz",
        "xlyp/sz",
        "kt1/sz",
        "kt2/sz",
        "m06-l/sz",
        "blyp-d/sz",
        "bp86-d/sz",
        "pbe-d/sz",
        "tpss-d/sz",
        "b97-d/sz",
        "revtpss/sz",
        "pbesol/sz",
        "rge2/sz",
        "ssb-d/sz",
        "mvs/sz",
        "mvsx/sz",
        "t-mgga/sz",
        "tpssh/sz",
        "b3lyp(vwn5)/sz",
        "o3lyp(vwn5)/sz",
        "kmlyp(vwn5)/sz",
        "pbe0/sz",
        "b3lyp*(vwn5)/sz",
        "bhandh/sz",
        "bhandhlyp/sz",
        "b97/sz",
        "b97-1/sz",
        "b97-2/sz",
        "mpbe0kcis/sz",
        "mpbe1kcis/sz",
        "b1lyp(vwn5)/sz",
        "b1pw91(vwn5)/sz",
        "mpw1pw/sz",
        "mpw1k/sz",
        "tau-hcth-hybrid/sz",
        "x3lyp(vwn5)/sz",
        "opbe0/sz",
        "m05/sz",
        "m05-2x/sz",
        "m06/sz",
        "m06-2x/sz",
        "b3lyp-d/sz",
        "gfn2_xtb",
    ]

    energy_target_names = [
        "KCIS-MODIFIED/DZP",
        "KCIS-ORIGINAL/DZP",
        "PKZB/DZP",
        "VS98/DZP",
        "LDA(VWN)/DZP",
        "PW91/DZP",
        "BLYP/DZP",
        "BP/DZP",
        "PBE/DZP",
        "RPBE/DZP",
        "REVPBE/DZP",
        "OLYP/DZP",
        "FT97/DZP",
        "BLAP3/DZP",
        "HCTH/93/DZP",
        "HCTH/120/DZP",
        "HCTH/147/DZP",
        "HCTH/407/DZP",
        "BMTAU1/DZP",
        "BOP/DZP",
        "PKZBX-KCISCOR/DZP",
        "VS98-X(XC)/DZP",
        "VS98-X-ONLY/DZP",
        "BECKE00/DZP",
        "BECKE00X(XC)/DZP",
        "BECKE00-X-ONLY/DZP",
        "BECKE88X+BR89C/DZP",
        "OLAP3/DZP",
        "TPSS/DZP",
        "MPBE/DZP",
        "OPBE/DZP",
        "OPERDEW/DZP",
        "MPBEKCIS/DZP",
        "MPW/DZP",
        "TAU-HCTH/DZP",
        "XLYP/DZP",
        "KT1/DZP",
        "KT2/DZP",
        "M06-L/DZP",
        "BLYP-D/DZP",
        "BP86-D/DZP",
        "PBE-D/DZP",
        "TPSS-D/DZP",
        "B97-D/DZP",
        "REVTPSS/DZP",
        "PBESOL/DZP",
        "RGE2/DZP",
        "SSB-D/DZP",
        "MVS/DZP",
        "MVSX/DZP",
        "T-MGGA/DZP",
        "TPSSH/DZP",
        "B3LYP(VWN5)/DZP",
        "O3LYP(VWN5)/DZP",
        "KMLYP(VWN5)/DZP",
        "PBE0/DZP",
        "B3LYP*(VWN5)/DZP",
        "BHANDH/DZP",
        "BHANDHLYP/DZP",
        "B97/DZP",
        "B97-1/DZP",
        "B97-2/DZP",
        "MPBE0KCIS/DZP",
        "MPBE1KCIS/DZP",
        "B1LYP(VWN5)/DZP",
        "B1PW91(VWN5)/DZP",
        "MPW1PW/DZP",
        "MPW1K/DZP",
        "TAU-HCTH-HYBRID/DZP",
        "X3LYP(VWN5)/DZP",
        "OPBE0/DZP",
        "M05/DZP",
        "M05-2X/DZP",
        "M06/DZP",
        "M06-2X/DZP",
        "B3LYP-D/DZP",
        "KCIS-MODIFIED/TZP",
        "KCIS-ORIGINAL/TZP",
        "PKZB/TZP",
        "VS98/TZP",
        "LDA(VWN)/TZP",
        "PW91/TZP",
        "BLYP/TZP",
        "BP/TZP",
        "PBE/TZP",
        "RPBE/TZP",
        "REVPBE/TZP",
        "OLYP/TZP",
        "FT97/TZP",
        "BLAP3/TZP",
        "HCTH/93/TZP",
        "HCTH/120/TZP",
        "HCTH/147/TZP",
        "HCTH/407/TZP",
        "BMTAU1/TZP",
        "BOP/TZP",
        "PKZBX-KCISCOR/TZP",
        "VS98-X(XC)/TZP",
        "VS98-X-ONLY/TZP",
        "BECKE00/TZP",
        "BECKE00X(XC)/TZP",
        "BECKE00-X-ONLY/TZP",
        "BECKE88X+BR89C/TZP",
        "OLAP3/TZP",
        "TPSS/TZP",
        "MPBE/TZP",
        "OPBE/TZP",
        "OPERDEW/TZP",
        "MPBEKCIS/TZP",
        "MPW/TZP",
        "TAU-HCTH/TZP",
        "XLYP/TZP",
        "KT1/TZP",
        "KT2/TZP",
        "M06-L/TZP",
        "BLYP-D/TZP",
        "BP86-D/TZP",
        "PBE-D/TZP",
        "TPSS-D/TZP",
        "B97-D/TZP",
        "REVTPSS/TZP",
        "PBESOL/TZP",
        "RGE2/TZP",
        "SSB-D/TZP",
        "MVS/TZP",
        "MVSX/TZP",
        "T-MGGA/TZP",
        "TPSSH/TZP",
        "B3LYP(VWN5)/TZP",
        "O3LYP(VWN5)/TZP",
        "KMLYP(VWN5)/TZP",
        "PBE0/TZP",
        "B3LYP*(VWN5)/TZP",
        "BHANDH/TZP",
        "BHANDHLYP/TZP",
        "B97/TZP",
        "B97-1/TZP",
        "B97-2/TZP",
        "MPBE0KCIS/TZP",
        "MPBE1KCIS/TZP",
        "B1LYP(VWN5)/TZP",
        "B1PW91(VWN5)/TZP",
        "MPW1PW/TZP",
        "MPW1K/TZP",
        "TAU-HCTH-HYBRID/TZP",
        "X3LYP(VWN5)/TZP",
        "OPBE0/TZP",
        "M05/TZP",
        "M05-2X/TZP",
        "M06/TZP",
        "M06-2X/TZP",
        "B3LYP-D/TZP",
        "KCIS-MODIFIED/SZ",
        "KCIS-ORIGINAL/SZ",
        "PKZB/SZ",
        "VS98/SZ",
        "LDA(VWN)/SZ",
        "PW91/SZ",
        "BLYP/SZ",
        "BP/SZ",
        "PBE/SZ",
        "RPBE/SZ",
        "REVPBE/SZ",
        "OLYP/SZ",
        "FT97/SZ",
        "BLAP3/SZ",
        "HCTH/93/SZ",
        "HCTH/120/SZ",
        "HCTH/147/SZ",
        "HCTH/407/SZ",
        "BMTAU1/SZ",
        "BOP/SZ",
        "PKZBX-KCISCOR/SZ",
        "VS98-X(XC)/SZ",
        "VS98-X-ONLY/SZ",
        "BECKE00/SZ",
        "BECKE00X(XC)/SZ",
        "BECKE00-X-ONLY/SZ",
        "BECKE88X+BR89C/SZ",
        "OLAP3/SZ",
        "TPSS/SZ",
        "MPBE/SZ",
        "OPBE/SZ",
        "OPERDEW/SZ",
        "MPBEKCIS/SZ",
        "MPW/SZ",
        "TAU-HCTH/SZ",
        "XLYP/SZ",
        "KT1/SZ",
        "KT2/SZ",
        "M06-L/SZ",
        "BLYP-D/SZ",
        "BP86-D/SZ",
        "PBE-D/SZ",
        "TPSS-D/SZ",
        "B97-D/SZ",
        "REVTPSS/SZ",
        "PBESOL/SZ",
        "RGE2/SZ",
        "SSB-D/SZ",
        "MVS/SZ",
        "MVSX/SZ",
        "T-MGGA/SZ",
        "TPSSH/SZ",
        "B3LYP(VWN5)/SZ",
        "O3LYP(VWN5)/SZ",
        "KMLYP(VWN5)/SZ",
        "PBE0/SZ",
        "B3LYP*(VWN5)/SZ",
        "BHANDH/SZ",
        "BHANDHLYP/SZ",
        "B97/SZ",
        "B97-1/SZ",
        "B97-2/SZ",
        "MPBE0KCIS/SZ",
        "MPBE1KCIS/SZ",
        "B1LYP(VWN5)/SZ",
        "B1PW91(VWN5)/SZ",
        "MPW1PW/SZ",
        "MPW1K/SZ",
        "TAU-HCTH-HYBRID/SZ",
        "X3LYP(VWN5)/SZ",
        "OPBE0/SZ",
        "M05/SZ",
        "M05-2X/SZ",
        "M06/SZ",
        "M06-2X/SZ",
        "B3LYP-D/SZ",
        "GFNXTB",
    ]

    __energy_unit__ = "ev"  # to fix
    __distance_unit__ = "ang"  # to fix
    __forces_unit__ = "ev/ang"  # to fix

    def _read_molecules_energies(self):
        d = {"DZP": None, "TZP": None, "SZ": None, "XTB": None}
        for basis in d.keys():
            d[basis] = pd.read_csv(p_join(self.root, basis, "molecules/molecules.csv"), index_col=False).drop(
                columns=["index"]
            )
        return pd.concat([d["DZP"], d["TZP"], d["SZ"], d["XTB"]], axis=1, ignore_index=False)

    def _read_all_xyzs(self):
        xyz_list = read_xyz_files(self.root)
        return pd.DataFrame(xyz_list)

    def read_raw_entries(self):
        df_energies = self._read_molecules_energies()
        df_xyz = self._read_all_xyzs()
        return [
            {"energies": np.atleast_2d(en), **xyz_dict}
            for xyz_dict, en in zip(df_xyz.to_dict("records"), df_energies.values)
        ]
