from glob import glob
from io import StringIO
from os.path import basename
from os.path import join as p_join

import numpy as np
import pandas as pd
from openqdc.methods import QmPotentialMethod
from openqdc.datasets.base import BaseDataset
from openqdc.utils.constants import ATOM_TABLE


def read_xyz_and_get_content(fname):
    with open(fname, "r") as f:
        content = f.read()
    s = StringIO(content)
    d = np.loadtxt(s, skiprows=2, dtype="str")
    z, positions = d[:, 0], d[:, 1:].astype(np.float32)
    z = np.array([ATOM_TABLE.GetAtomicNumber(s) for s in z])
    xs = np.stack((z, np.zeros_like(z)), axis=-1)
    conf = dict(
        atomic_inputs=np.concatenate((xs, positions), axis=-1, dtype=np.float32),
        name=np.array([basename(fname)]),
        n_atoms=np.array([positions.shape[0]], dtype=np.int32),
        subset=np.array(["multixcqm9"]),
    )
    return conf


def read_xyz_files(folder_path):
    xyz_list = []
    for file in sorted(glob(folder_path + "/xyzfiles/*.xyz")):
        xyz_list.append(read_xyz_and_get_content(file))
    return xyz_list


class MultixcQM9(BaseDataset):
    """
    MultixcQM9 is a dataset of  molecular and reaction energies from
    multi-level quantum chemical methods consisting of 133â€‰K QM9 molecules
    calculated with 76 different DFT functionals and three different basis sets
    (228 energy numbers for each molecule) + 1 GFN2-XTB calculation.

    Usage:
    ```python
    from openqdc.datasets import NablaDFT
    dataset = NablaDFT()
    ```

    References:
    - https://www.nature.com/articles/s41597-023-02690-2
    - https://github.com/chemsurajit/largeDFTdata
    """

    __name__ = "multixcqm9"

    __energy_methods__ = [
        QmPotentialMethod.KCIS_MODIFIED_DZP,
        QmPotentialMethod.KCIS_ORIGINAL_DZP,
        QmPotentialMethod.PKZB_DZP,
        QmPotentialMethod.VS98_DZP,
        QmPotentialMethod.LDA_VWN_DZP,
        QmPotentialMethod.PW91_DZP,
        QmPotentialMethod.BLYP_DZP,
        QmPotentialMethod.BP_DZP,
        QmPotentialMethod.PBE_DZP,
        QmPotentialMethod.RPBE_DZP,
        QmPotentialMethod.REVPBE_DZP,
        QmPotentialMethod.OLYP_DZP,
        QmPotentialMethod.FT97_DZP,
        QmPotentialMethod.BLAP3_DZP,
        QmPotentialMethod.HCTH_93_DZP,
        QmPotentialMethod.HCTH_120_DZP,
        QmPotentialMethod.HCTH_147_DZP,
        QmPotentialMethod.HCTH_407_DZP,
        QmPotentialMethod.BMTAU1_DZP,
        QmPotentialMethod.BOP_DZP,
        QmPotentialMethod.PKZBX_KCISCOR_DZP,
        QmPotentialMethod.VS98_X_XC_DZP,
        QmPotentialMethod.VS98_X_ONLY_DZP,
        QmPotentialMethod.BECKE00_DZP,
        QmPotentialMethod.BECKE00X_XC_DZP,
        QmPotentialMethod.BECKE00_X_ONLY_DZP,
        QmPotentialMethod.BECKE88X_BR89C_DZP,
        QmPotentialMethod.OLAP3_DZP,
        QmPotentialMethod.TPSS_DZP,
        QmPotentialMethod.MPBE_DZP,
        QmPotentialMethod.OPBE_DZP,
        QmPotentialMethod.OPERDEW_DZP,
        QmPotentialMethod.MPBEKCIS_DZP,
        QmPotentialMethod.MPW_DZP,
        QmPotentialMethod.TAU_HCTH_DZP,
        QmPotentialMethod.XLYP_DZP,
        QmPotentialMethod.KT1_DZP,
        QmPotentialMethod.KT2_DZP,
        QmPotentialMethod.M06_L_DZP,
        QmPotentialMethod.BLYP_D_DZP,
        QmPotentialMethod.BP86_D_DZP,
        QmPotentialMethod.PBE_D_DZP,
        QmPotentialMethod.TPSSD_DZP,
        QmPotentialMethod.B97_D_DZP,
        QmPotentialMethod.REVTPSS_DZP,
        QmPotentialMethod.PBESOL_DZP,
        QmPotentialMethod.RGE2_DZP,
        QmPotentialMethod.SSB_D_DZP,
        QmPotentialMethod.MVS_DZP,
        QmPotentialMethod.MVSX_DZP,
        QmPotentialMethod.TMGGA_DZP,
        QmPotentialMethod.TPSSH_DZP,
        QmPotentialMethod.B3LYP_VWN5_DZP,
        QmPotentialMethod.O3LYP_VWN5_DZP,
        QmPotentialMethod.KMLYP_VWN5_DZP,
        QmPotentialMethod.PBE0_DZP,
        QmPotentialMethod.B3LYP_S_VWN5_DZP,
        QmPotentialMethod.BHANDH_DZP,
        QmPotentialMethod.BHANDHLYP_DZP,
        QmPotentialMethod.B97_DZP,
        QmPotentialMethod.B97_1_DZP,
        QmPotentialMethod.B97_2_DZP,
        QmPotentialMethod.MPBE0KCIS_DZP,
        QmPotentialMethod.MPBE1KCIS_DZP,
        QmPotentialMethod.B1LYP_VWN5_DZP,
        QmPotentialMethod.B1PW91_VWN5_DZP,
        QmPotentialMethod.MPW1PW_DZP,
        QmPotentialMethod.MPW1K_DZP,
        QmPotentialMethod.TAU_HCTH_HYBRID_DZP,
        QmPotentialMethod.X3LYP_VWN5_DZP,
        QmPotentialMethod.OPBE0_DZP,
        QmPotentialMethod.M05_DZP,
        QmPotentialMethod.M05_2X_DZP,
        QmPotentialMethod.M06_DZP,
        QmPotentialMethod.M06_2X_DZP,
        QmPotentialMethod.B3LYP_D_DZP,
        QmPotentialMethod.KCIS_MODIFIED_TZP,
        QmPotentialMethod.KCIS_ORIGINAL_TZP,
        QmPotentialMethod.PKZB_TZP,
        QmPotentialMethod.VS98_TZP,
        QmPotentialMethod.LDA_VWN_TZP,
        QmPotentialMethod.PW91_TZP,
        QmPotentialMethod.BLYP_TZP,
        QmPotentialMethod.BP_TZP,
        QmPotentialMethod.PBE_TZP,
        QmPotentialMethod.RPBE_TZP,
        QmPotentialMethod.REVPBE_TZP,
        QmPotentialMethod.OLYP_TZP,
        QmPotentialMethod.FT97_TZP,
        QmPotentialMethod.BLAP3_TZP,
        QmPotentialMethod.HCTH_93_TZP,
        QmPotentialMethod.HCTH_120_TZP,
        QmPotentialMethod.HCTH_147_TZP,
        QmPotentialMethod.HCTH_407_TZP,
        QmPotentialMethod.BMTAU1_TZP,
        QmPotentialMethod.BOP_TZP,
        QmPotentialMethod.PKZBX_KCISCOR_TZP,
        QmPotentialMethod.VS98_X_XC_TZP,
        QmPotentialMethod.VS98_X_ONLY_TZP,
        QmPotentialMethod.BECKE00_TZP,
        QmPotentialMethod.BECKE00X_XC_TZP,
        QmPotentialMethod.BECKE00_X_ONLY_TZP,
        QmPotentialMethod.BECKE88X_BR89C_TZP,
        QmPotentialMethod.OLAP3_TZP,
        QmPotentialMethod.TPSS_TZP,
        QmPotentialMethod.MPBE_TZP,
        QmPotentialMethod.OPBE_TZP,
        QmPotentialMethod.OPERDEW_TZP,
        QmPotentialMethod.MPBEKCIS_TZP,
        QmPotentialMethod.MPW_TZP,
        QmPotentialMethod.TAU_HCTH_TZP,
        QmPotentialMethod.XLYP_TZP,
        QmPotentialMethod.KT1_TZP,
        QmPotentialMethod.KT2_TZP,
        QmPotentialMethod.M06_L_TZP,
        QmPotentialMethod.BLYP_D_TZP,
        QmPotentialMethod.BP86_D_TZP,
        QmPotentialMethod.PBE_D_TZP,
        QmPotentialMethod.TPSSD_TZP,
        QmPotentialMethod.B97_D_TZP,
        QmPotentialMethod.REVTPSS_TZP,
        QmPotentialMethod.PBESOL_TZP,
        QmPotentialMethod.RGE2_TZP,
        QmPotentialMethod.SSB_D_TZP,
        QmPotentialMethod.MVS_TZP,
        QmPotentialMethod.MVSX_TZP,
        QmPotentialMethod.TMGGA_TZP,
        QmPotentialMethod.TPSSH_TZP,
        QmPotentialMethod.B3LYP_VWN5_TZP,
        QmPotentialMethod.O3LYP_VWN5_TZP,
        QmPotentialMethod.KMLYP_VWN5_TZP,
        QmPotentialMethod.PBE0_TZP,
        QmPotentialMethod.B3LYP_S_VWN5_TZP,
        QmPotentialMethod.BHANDH_TZP,
        QmPotentialMethod.BHANDHLYP_TZP,
        QmPotentialMethod.B97_TZP,
        QmPotentialMethod.B97_1_TZP,
        QmPotentialMethod.B97_2_TZP,
        QmPotentialMethod.MPBE0KCIS_TZP,
        QmPotentialMethod.MPBE1KCIS_TZP,
        QmPotentialMethod.B1LYP_VWN5_TZP,
        QmPotentialMethod.B1PW91_VWN5_TZP,
        QmPotentialMethod.MPW1PW_TZP,
        QmPotentialMethod.MPW1K_TZP,
        QmPotentialMethod.TAU_HCTH_HYBRID_TZP,
        QmPotentialMethod.X3LYP_VWN5_TZP,
        QmPotentialMethod.OPBE0_TZP,
        QmPotentialMethod.M05_TZP,
        QmPotentialMethod.M05_2X_TZP,
        QmPotentialMethod.M06_TZP,
        QmPotentialMethod.M06_2X_TZP,
        QmPotentialMethod.B3LYP_D_TZP,
        QmPotentialMethod.KCIS_MODIFIED_SZ,
        QmPotentialMethod.KCIS_ORIGINAL_SZ,
        QmPotentialMethod.PKZB_SZ,
        QmPotentialMethod.VS98_SZ,
        QmPotentialMethod.LDA_VWN_SZ,
        QmPotentialMethod.PW91_SZ,
        QmPotentialMethod.BLYP_SZ,
        QmPotentialMethod.BP_SZ,
        QmPotentialMethod.PBE_SZ,
        QmPotentialMethod.RPBE_SZ,
        QmPotentialMethod.REVPBE_SZ,
        QmPotentialMethod.OLYP_SZ,
        QmPotentialMethod.FT97_SZ,
        QmPotentialMethod.BLAP3_SZ,
        QmPotentialMethod.HCTH_93_SZ,
        QmPotentialMethod.HCTH_120_SZ,
        QmPotentialMethod.HCTH_147_SZ,
        QmPotentialMethod.HCTH_407_SZ,
        QmPotentialMethod.BMTAU1_SZ,
        QmPotentialMethod.BOP_SZ,
        QmPotentialMethod.PKZBX_KCISCOR_SZ,
        QmPotentialMethod.VS98_X_XC_SZ,
        QmPotentialMethod.VS98_X_ONLY_SZ,
        QmPotentialMethod.BECKE00_SZ,
        QmPotentialMethod.BECKE00X_XC_SZ,
        QmPotentialMethod.BECKE00_X_ONLY_SZ,
        QmPotentialMethod.BECKE88X_BR89C_SZ,
        QmPotentialMethod.OLAP3_SZ,
        QmPotentialMethod.TPSS_SZ,
        QmPotentialMethod.MPBE_SZ,
        QmPotentialMethod.OPBE_SZ,
        QmPotentialMethod.OPERDEW_SZ,
        QmPotentialMethod.MPBEKCIS_SZ,
        QmPotentialMethod.MPW_SZ,
        QmPotentialMethod.TAU_HCTH_SZ,
        QmPotentialMethod.XLYP_SZ,
        QmPotentialMethod.KT1_SZ,
        QmPotentialMethod.KT2_SZ,
        QmPotentialMethod.M06_L_SZ,
        QmPotentialMethod.BLYP_D_SZ,
        QmPotentialMethod.BP86_D_SZ,
        QmPotentialMethod.PBE_D_SZ,
        QmPotentialMethod.TPSSD_SZ,
        QmPotentialMethod.B97_D_SZ,
        QmPotentialMethod.REVTPSS_SZ,
        QmPotentialMethod.PBESOL_SZ,
        QmPotentialMethod.RGE2_SZ,
        QmPotentialMethod.SSB_D_SZ,
        QmPotentialMethod.MVS_SZ,
        QmPotentialMethod.MVSX_SZ,
        QmPotentialMethod.TMGGA_SZ,
        QmPotentialMethod.TPSSH_SZ,
        QmPotentialMethod.B3LYP_VWN5_SZ,
        QmPotentialMethod.O3LYP_VWN5_SZ,
        QmPotentialMethod.KMLYP_VWN5_SZ,
        QmPotentialMethod.PBE0_SZ,
        QmPotentialMethod.B3LYP_S_VWN5_SZ,
        QmPotentialMethod.BHANDH_SZ,
        QmPotentialMethod.BHANDHLYP_SZ,
        QmPotentialMethod.B97_SZ,
        QmPotentialMethod.B97_1_SZ,
        QmPotentialMethod.B97_2_SZ,
        QmPotentialMethod.MPBE0KCIS_SZ,
        QmPotentialMethod.MPBE1KCIS_SZ,
        QmPotentialMethod.B1LYP_VWN5_SZ,
        QmPotentialMethod.B1PW91_VWN5_SZ,
        QmPotentialMethod.MPW1PW_SZ,
        QmPotentialMethod.MPW1K_SZ,
        QmPotentialMethod.TAU_HCTH_HYBRID_SZ,
        QmPotentialMethod.X3LYP_VWN5_SZ,
        QmPotentialMethod.OPBE0_SZ,
        QmPotentialMethod.M05_SZ,
        QmPotentialMethod.M05_2X_SZ,
        QmPotentialMethod.M06_SZ,
        QmPotentialMethod.M06_2X_SZ,
        QmPotentialMethod.B3LYP_D_SZ,
        QmPotentialMethod.GFN2_XTB
    ]

    energy_target_names = [
        "KCIS-MODIFIED/DZP",
        "KCIS-ORIGINAL/DZP",
        "PKZB/DZP",
        "VS98/DZP",
        "LDA(VWN)/DZP",
        "PW91/DZP",
        "BLYP/DZP",
        "BP/DZP",
        "PBE/DZP",
        "RPBE/DZP",
        "REVPBE/DZP",
        "OLYP/DZP",
        "FT97/DZP",
        "BLAP3/DZP",
        "HCTH/93/DZP",
        "HCTH/120/DZP",
        "HCTH/147/DZP",
        "HCTH/407/DZP",
        "BMTAU1/DZP",
        "BOP/DZP",
        "PKZBX-KCISCOR/DZP",
        "VS98-X(XC)/DZP",
        "VS98-X-ONLY/DZP",
        "BECKE00/DZP",
        "BECKE00X(XC)/DZP",
        "BECKE00-X-ONLY/DZP",
        "BECKE88X+BR89C/DZP",
        "OLAP3/DZP",
        "TPSS/DZP",
        "MPBE/DZP",
        "OPBE/DZP",
        "OPERDEW/DZP",
        "MPBEKCIS/DZP",
        "MPW/DZP",
        "TAU-HCTH/DZP",
        "XLYP/DZP",
        "KT1/DZP",
        "KT2/DZP",
        "M06-L/DZP",
        "BLYP-D/DZP",
        "BP86-D/DZP",
        "PBE-D/DZP",
        "TPSS-D/DZP",
        "B97-D/DZP",
        "REVTPSS/DZP",
        "PBESOL/DZP",
        "RGE2/DZP",
        "SSB-D/DZP",
        "MVS/DZP",
        "MVSX/DZP",
        "T-MGGA/DZP",
        "TPSSH/DZP",
        "B3LYP(VWN5)/DZP",
        "O3LYP(VWN5)/DZP",
        "KMLYP(VWN5)/DZP",
        "PBE0/DZP",
        "B3LYP*(VWN5)/DZP",
        "BHANDH/DZP",
        "BHANDHLYP/DZP",
        "B97/DZP",
        "B97-1/DZP",
        "B97-2/DZP",
        "MPBE0KCIS/DZP",
        "MPBE1KCIS/DZP",
        "B1LYP(VWN5)/DZP",
        "B1PW91(VWN5)/DZP",
        "MPW1PW/DZP",
        "MPW1K/DZP",
        "TAU-HCTH-HYBRID/DZP",
        "X3LYP(VWN5)/DZP",
        "OPBE0/DZP",
        "M05/DZP",
        "M05-2X/DZP",
        "M06/DZP",
        "M06-2X/DZP",
        "B3LYP-D/DZP",
        "KCIS-MODIFIED/TZP",
        "KCIS-ORIGINAL/TZP",
        "PKZB/TZP",
        "VS98/TZP",
        "LDA(VWN)/TZP",
        "PW91/TZP",
        "BLYP/TZP",
        "BP/TZP",
        "PBE/TZP",
        "RPBE/TZP",
        "REVPBE/TZP",
        "OLYP/TZP",
        "FT97/TZP",
        "BLAP3/TZP",
        "HCTH/93/TZP",
        "HCTH/120/TZP",
        "HCTH/147/TZP",
        "HCTH/407/TZP",
        "BMTAU1/TZP",
        "BOP/TZP",
        "PKZBX-KCISCOR/TZP",
        "VS98-X(XC)/TZP",
        "VS98-X-ONLY/TZP",
        "BECKE00/TZP",
        "BECKE00X(XC)/TZP",
        "BECKE00-X-ONLY/TZP",
        "BECKE88X+BR89C/TZP",
        "OLAP3/TZP",
        "TPSS/TZP",
        "MPBE/TZP",
        "OPBE/TZP",
        "OPERDEW/TZP",
        "MPBEKCIS/TZP",
        "MPW/TZP",
        "TAU-HCTH/TZP",
        "XLYP/TZP",
        "KT1/TZP",
        "KT2/TZP",
        "M06-L/TZP",
        "BLYP-D/TZP",
        "BP86-D/TZP",
        "PBE-D/TZP",
        "TPSS-D/TZP",
        "B97-D/TZP",
        "REVTPSS/TZP",
        "PBESOL/TZP",
        "RGE2/TZP",
        "SSB-D/TZP",
        "MVS/TZP",
        "MVSX/TZP",
        "T-MGGA/TZP",
        "TPSSH/TZP",
        "B3LYP(VWN5)/TZP",
        "O3LYP(VWN5)/TZP",
        "KMLYP(VWN5)/TZP",
        "PBE0/TZP",
        "B3LYP*(VWN5)/TZP",
        "BHANDH/TZP",
        "BHANDHLYP/TZP",
        "B97/TZP",
        "B97-1/TZP",
        "B97-2/TZP",
        "MPBE0KCIS/TZP",
        "MPBE1KCIS/TZP",
        "B1LYP(VWN5)/TZP",
        "B1PW91(VWN5)/TZP",
        "MPW1PW/TZP",
        "MPW1K/TZP",
        "TAU-HCTH-HYBRID/TZP",
        "X3LYP(VWN5)/TZP",
        "OPBE0/TZP",
        "M05/TZP",
        "M05-2X/TZP",
        "M06/TZP",
        "M06-2X/TZP",
        "B3LYP-D/TZP",
        "KCIS-MODIFIED/SZ",
        "KCIS-ORIGINAL/SZ",
        "PKZB/SZ",
        "VS98/SZ",
        "LDA(VWN)/SZ",
        "PW91/SZ",
        "BLYP/SZ",
        "BP/SZ",
        "PBE/SZ",
        "RPBE/SZ",
        "REVPBE/SZ",
        "OLYP/SZ",
        "FT97/SZ",
        "BLAP3/SZ",
        "HCTH/93/SZ",
        "HCTH/120/SZ",
        "HCTH/147/SZ",
        "HCTH/407/SZ",
        "BMTAU1/SZ",
        "BOP/SZ",
        "PKZBX-KCISCOR/SZ",
        "VS98-X(XC)/SZ",
        "VS98-X-ONLY/SZ",
        "BECKE00/SZ",
        "BECKE00X(XC)/SZ",
        "BECKE00-X-ONLY/SZ",
        "BECKE88X+BR89C/SZ",
        "OLAP3/SZ",
        "TPSS/SZ",
        "MPBE/SZ",
        "OPBE/SZ",
        "OPERDEW/SZ",
        "MPBEKCIS/SZ",
        "MPW/SZ",
        "TAU-HCTH/SZ",
        "XLYP/SZ",
        "KT1/SZ",
        "KT2/SZ",
        "M06-L/SZ",
        "BLYP-D/SZ",
        "BP86-D/SZ",
        "PBE-D/SZ",
        "TPSS-D/SZ",
        "B97-D/SZ",
        "REVTPSS/SZ",
        "PBESOL/SZ",
        "RGE2/SZ",
        "SSB-D/SZ",
        "MVS/SZ",
        "MVSX/SZ",
        "T-MGGA/SZ",
        "TPSSH/SZ",
        "B3LYP(VWN5)/SZ",
        "O3LYP(VWN5)/SZ",
        "KMLYP(VWN5)/SZ",
        "PBE0/SZ",
        "B3LYP*(VWN5)/SZ",
        "BHANDH/SZ",
        "BHANDHLYP/SZ",
        "B97/SZ",
        "B97-1/SZ",
        "B97-2/SZ",
        "MPBE0KCIS/SZ",
        "MPBE1KCIS/SZ",
        "B1LYP(VWN5)/SZ",
        "B1PW91(VWN5)/SZ",
        "MPW1PW/SZ",
        "MPW1K/SZ",
        "TAU-HCTH-HYBRID/SZ",
        "X3LYP(VWN5)/SZ",  
        "OPBE0/SZ",
        "M05/SZ",
        "M05-2X/SZ",
        "M06/SZ",
        "M06-2X/SZ",
        "B3LYP-D/SZ",
        "GFNXTB",
    ]

    __energy_unit__ = "ev"  # to fix
    __distance_unit__ = "ang"  # to fix
    __forces_unit__ = "ev/ang"  # to fix

    def _read_molecules_energies(self):
        d = {"DZP": None, "TZP": None, "SZ": None, "XTB": None}
        for basis in d.keys():
            d[basis] = pd.read_csv(p_join(self.root, basis, "molecules/molecules.csv"), index_col=False).drop(
                columns=["index"]
            )
        return pd.concat([d["DZP"], d["TZP"], d["SZ"], d["XTB"]], axis=1, ignore_index=False)

    def _read_all_xyzs(self):
        xyz_list = read_xyz_files(self.root)
        return pd.DataFrame(xyz_list)

    def read_raw_entries(self):
        df_energies = self._read_molecules_energies()
        df_xyz = self._read_all_xyzs()
        return [
            {"energies": np.atleast_2d(en), **xyz_dict}
            for xyz_dict, en in zip(df_xyz.to_dict("records"), df_energies.values.astype(np.float32))
        ]
